@{
    ViewBag.Title = "Welcome Page";
}
@section scripts {
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js"></script>
    <script src="~/Scripts/no-padding.js"></script>

    <script>

        $(function () {

            function encode(text, encKey, encIv) {
                var key = CryptoJS.enc.Base64.parse(encKey);
                
                var iv = CryptoJS.enc.Base64.parse(encIv);
                var encryptedlogin = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(text), key,
                    {
                        keySize: 256 / 8,
                        iv: iv,
                        mode: CryptoJS.mode.CBC,
                        padding: CryptoJS.pad.Pkcs7
                    });
                return encryptedlogin.ciphertext.toString(CryptoJS.enc.Base64);
            }

            function base64UrlDecode(str) {
                str = atob(str.replace(/-/g, '+').replace(/_/g, '/'));
                var buffer = new Uint8Array(str.length);
                for (var i = 0; i < str.length; ++i) {
                    buffer[i] = str.charCodeAt(i);
                }
                return buffer;
            }

            function convertStringToArrayBufferView(str) {
                var bytes = new Uint8Array(str.length);
                for (var iii = 0; iii < str.length; iii++) {
                    bytes[iii] = str.charCodeAt(iii);
                }

                return bytes;
            }
            function ab2str(buf) {
                return String.fromCharCode.apply(null, new Uint8Array(buf));
            }

            function str2ab(str) {
                var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char
                var bufView = new Uint16Array(buf);
                for (var i = 0, strLen = str.length; i < strLen; i++) {
                    bufView[i] = str.charCodeAt(i);
                }
                return buf;
            }

            var session = $.connection.sessionHub;
            session.client.disconnect = function () {
                $.connection.hub.stop();
                document.getElementById('logoutForm').submit()
            };
            $.connection.hub.start().done(function () {
                //session.server.connect();
            });
            $(document).ready(function () {
                $('#button').on('click', function () {
                    window.crypto.subtle.generateKey(
                        {
                            name: "RSA-OAEP",
                            modulusLength: 2048, //can be 1024, 2048, or 4096
                            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                            hash: { name: "SHA-1" }, //can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
                        },
                        true, //whether the key is extractable (i.e. can be used in exportKey)
                        ["encrypt", "decrypt"] //must be ["encrypt", "decrypt"] or ["wrapKey", "unwrapKey"]
                    )
                    .then(function (key) {
                        var myKey = key;
                        window.crypto.subtle.exportKey(
                            "jwk", //can be "jwk" (public or private), "spki" (public only), or "pkcs8" (private only)
                            myKey.publicKey //can be a publicKey or privateKey, as long as extractable was true
                        )
                        .then(function (keydata) {
                            $.ajax({
                                type: "GET",
                                url: "/home/GetNewKey",
                                data: { publicKey: keydata.n, e: keydata.e },
                                contentType: "application/text; charset=utf-8'",
                                dataType: "text",
                                success: successFunc,
                                error: errorFunc
                            });

                            function successFunc(data, status) {
                                var dataArray = data.split(";");
                                window.crypto.subtle.decrypt(
                                    {
                                        name: "RSA-OAEP",
                                        //label: Uint8Array([...]) //optional
                                        hash: { name: "SHA-1" }
                                    },
                                    myKey.privateKey, //from generateKey or importKey above
                                    base64UrlDecode(dataArray[0]) //ArrayBuffer of the data
                                )
                                .then(function (decryptedKey) {
                                    var oddDecryptedKey = (new Uint8Array(decryptedKey)).filter(function (x, i) { return i % 2 == 0 });
                                    window.crypto.subtle.decrypt(
                                       {
                                           name: "RSA-OAEP",
                                           //label: Uint8Array([...]) //optional
                                           hash: { name: "SHA-1" }
                                       },
                                       myKey.privateKey, //from generateKey or importKey above
                                       base64UrlDecode(dataArray[1]) //ArrayBuffer of the data
                                    )
                                    .then(function (decryptedIv) {
                                        var oddDecryptedIv = (new Uint8Array(decryptedIv)).filter(function (x, i) { return i % 2 == 0 });
                                        var k = encode($('#textBox1').val(), ab2str(oddDecryptedKey), ab2str(oddDecryptedIv));
                                        $('#textBox2').val(k);
                                        $.ajax({
                                            type: "GET",
                                            url: "/home/Decrypt",
                                            data: { encryptedMessage: k },
                                            contentType: "application/text; charset=utf-8",
                                            dataType: "text",
                                            success: function (d, s) {
                                                $('#textBox3').val(d);
                                            },
                                            error: errorFunc
                                        });
                                    }).catch(function (err) {
                                        console.log(err);
                                    });
                                }).catch(function (err) {
                                    console.log(err);
                                });


                            }

                            function errorFunc() {
                                alert('error');
                            }


                        });
                    });

                });
            });
        });

    </script>
}
<div class="jumbotron">
    Hello, @User.Identity.Name!
</div>

<div class="container">
    @Html.Label("textBox1")
    <input type="text" id="textBox1" /> <br />
    @Html.Label("textBox2")
    <input type="text" id="textBox2" /> <br />
    @Html.Label("textBox3")
    <input type="text" id="textBox3" /> <br />
    <input type="hidden" id="textBox4" /> <br />


    <input type="button" id="button" value="Ok" />
</div>




